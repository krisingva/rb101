# Write a method that takes an Array of Integers between 0 and 19, and returns
# an Array of those Integers sorted based on the English words for each number:

# zero, one, two, three, four, five, six, seven, eight, nine, ten, eleven,
# twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen

# Notes:
# 1. Make a hash with the key value pairs being the integer and the English word
#    for the integer (key = number, value = word).
# 2. Exchange out the numbers in the original array for the word by referencing
#    the hash key and value.
# 3. Sort the array by alphabet.
# 4. Exchange out the words for numbers referencing the hash key and value.

HASH = {
  0 => 'zero',
  1 => 'one',
  2 => 'two',
  3 => 'three',
  4 => 'four',
  5 => 'five',
  6 => 'six',
  7 => 'seven',
  8 => 'eight',
  9 => 'nine',
  10 => 'ten',
  11 => 'eleven',
  12 => 'twelve',
  13 => 'thirteen',
  14 => 'fourteen',
  15 => 'fifteen',
  16 => 'sixteen',
  17 => 'seventeen',
  18 => 'eighteen',
  19 => 'nineteen'
}

def alphabetic_number_sort(array)
  array.map! { |x| x = HASH[x] }
  array.sort!
  array.map! { |x| x = HASH.invert[x] }
end

# Examples:

p alphabetic_number_sort((0..19).to_a) == [
  8, 18, 11, 15, 5, 4, 14, 9, 19, 1, 7, 17,
  6, 16, 10, 13, 3, 12, 2, 0
]

# LS Solution (does the sorting without converting the array of numbers to array
# of words):
# Creates an array of number words. Using the Enumerable#sort_by method, the
# integer number array is iterated through and each element is used as a
# reference to the number word array index. The sorting will then be based on
# the words.
# Documentation for Enumerable#sort_by:
# sort_by { |obj| block } → array
# sort_by → an_enumerator
# Sorts enum using a set of keys generated by mapping the values in enum through
# the given block.

# The result is not guaranteed to be stable. When two keys are equal, the order
# of the corresponding elements is unpredictable.

# If no block is given, an enumerator is returned instead.

# %w{apple pear fig}.sort_by { |word| word.length }
# #=> ["fig", "pear", "apple"]


# Solution
# NUMBER_WORDS = %w(zero one two three four
#                   five six seven eight nine
#                   ten eleven twelve thirteen fourteen
#                   fifteen sixteen seventeen eighteen nineteen)

# def alphabetic_number_sort(numbers)
#   numbers.sort_by { |number| NUMBER_WORDS[number] }
# end

# NUMBER_WORDS = %w(zero one two three four
#                   five six seven eight nine
#                   ten eleven twelve thirteen fourteen
#                   fifteen sixteen seventeen eighteen nineteen)

# def alphabetic_number_sort(numbers)
#   numbers.sort_by! { |number| NUMBER_WORDS[number] }
# end
# # Examples:

# p alphabetic_number_sort((0..19).to_a) == [
#   8, 18, 11, 15, 5, 4, 14, 9, 19, 1, 7, 17,
#   6, 16, 10, 13, 3, 12, 2, 0]

# Solution
#   The secret to solving this problem is to use a data structure of some kind
#   to map numbers to their English names. Once you've done this, read the
#   documentation for Enumerable#sort_by, and construct a call that sorts the
#   numbers by each number's corresponding English name.

# Further Exploration Why do you think we didn't use Array#sort_by! instead of
# Enumerable#sort_by?
# sort_by! does give the right result for the given example

# For an extra challenge, rewrite your method to use Enumerable#sort (unless you
# already did so).